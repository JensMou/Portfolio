{"version":3,"sources":["shared/TopLinks/index.jsx","shared/HomeHeader/index.jsx","App.js","serviceWorker.js","index.js"],"names":["TopLinks","react_default","a","createElement","className","HomeHeader","TxtRotate","el","toRotate","period","this","loopNum","parseInt","txt","tick","isDeleting","prototype","i","length","fullTxt","substring","innerHTML","that","delta","Math","random","setTimeout","window","onload","elements","document","getElementsByClassName","getAttribute","JSON","parse","css","type","body","appendChild","class","data-period","data-rotate","App","shared_TopLinks","shared_HomeHeader","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAWeA,MAPf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBCuERC,MA1Ef,WAEI,IAAMC,EAAY,SAAUC,EAAIC,EAAUC,GACtCC,KAAKF,SAAWA,EAChBE,KAAKH,GAAKA,EACVG,KAAKC,QAAU,EACfD,KAAKD,OAASG,SAASH,EAAQ,KAAO,IACtCC,KAAKG,IAAM,GACXH,KAAKI,OACLJ,KAAKK,YAAa,GAkDtB,OA/CAT,EAAUU,UAAUF,KAAO,WACvB,IAAMG,EAAIP,KAAKC,QAAUD,KAAKF,SAASU,OACjCC,EAAUT,KAAKF,SAASS,GAE1BP,KAAKK,WACLL,KAAKG,IAAMM,EAAQC,UAAU,EAAGV,KAAKG,IAAIK,OAAS,GAElDR,KAAKG,IAAMM,EAAQC,UAAU,EAAGV,KAAKG,IAAIK,OAAS,GAGtDR,KAAKH,GAAGc,UAAY,sBAAwBX,KAAKG,IAAM,UAEvD,IAAMS,EAAOZ,KACTa,EAAQ,IAAsB,IAAhBC,KAAKC,SAEnBf,KAAKK,aAAcQ,GAAS,GAE3Bb,KAAKK,YAAcL,KAAKG,MAAQM,EAG1BT,KAAKK,YAA2B,KAAbL,KAAKG,MAC/BH,KAAKK,YAAa,EAClBL,KAAKC,UACLY,EAAQ,MALRA,EAAQb,KAAKD,OACbC,KAAKK,YAAa,GAOtBW,WAAW,WACPJ,EAAKR,QACNS,IAGPI,OAAOC,OAAS,WAEZ,IADA,IAAMC,EAAWC,SAASC,uBAAuB,cACxCd,EAAI,EAAGA,EAAIY,EAASX,OAAQD,IAAK,CACtC,IAAMT,EAAWqB,EAASZ,GAAGe,aAAa,eACpCvB,EAASoB,EAASZ,GAAGe,aAAa,eACpCxB,GACA,IAAIF,EAAUuB,EAASZ,GAAIgB,KAAKC,MAAM1B,GAAWC,GAIzD,IAAM0B,EAAML,SAAS3B,cAAc,SACnCgC,EAAIC,KAAO,WACXD,EAAId,UAAY,0DAChBS,SAASO,KAAKC,YAAYH,IAI1BlC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,OAEIH,EAAAC,EAAAC,cAAA,OACIoC,MAAM,aACNC,cAAY,IACZC,cAAY,iGCvDjBC,MATf,WACE,OACEzC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,QCGcC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,iECZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASrB,SAASsB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b4923574.chunk.js","sourcesContent":["import React, { } from 'react';\r\nimport './index.scss'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nfunction TopLinks() {\r\n    return (\r\n        <div className=\"topBarLinks\">\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TopLinks","import React, { } from 'react';\r\nimport './index.scss'\r\n\r\nfunction HomeHeader() {\r\n\r\n    const TxtRotate = function (el, toRotate, period) {\r\n        this.toRotate = toRotate;\r\n        this.el = el;\r\n        this.loopNum = 0;\r\n        this.period = parseInt(period, 10) || 2000;\r\n        this.txt = '';\r\n        this.tick();\r\n        this.isDeleting = false;\r\n    };\r\n\r\n    TxtRotate.prototype.tick = function () {\r\n        const i = this.loopNum % this.toRotate.length;\r\n        const fullTxt = this.toRotate[i];\r\n\r\n        if (this.isDeleting) {\r\n            this.txt = fullTxt.substring(0, this.txt.length - 1);\r\n        } else {\r\n            this.txt = fullTxt.substring(0, this.txt.length + 1);\r\n        }\r\n\r\n        this.el.innerHTML = '<span class=\"wrap\">' + this.txt + '</span>';\r\n\r\n        const that = this;\r\n        let delta = 100 - Math.random() * 100;\r\n\r\n        if (this.isDeleting) { delta /= 2; }\r\n\r\n        if (!this.isDeleting && this.txt === fullTxt) {\r\n            delta = this.period;\r\n            this.isDeleting = true;\r\n        } else if (this.isDeleting && this.txt === '') {\r\n            this.isDeleting = false;\r\n            this.loopNum++;\r\n            delta = 500;\r\n        }\r\n\r\n        setTimeout(function () {\r\n            that.tick();\r\n        }, delta);\r\n    };\r\n\r\n    window.onload = function () {\r\n        const elements = document.getElementsByClassName('txt-rotate');\r\n        for (let i = 0; i < elements.length; i++) {\r\n            const toRotate = elements[i].getAttribute('data-rotate');\r\n            const period = elements[i].getAttribute('data-period');\r\n            if (toRotate) {\r\n                new TxtRotate(elements[i], JSON.parse(toRotate), period);\r\n            }\r\n        }\r\n        // INJECT CSS\r\n        const css = document.createElement(\"style\");\r\n        css.type = \"text/css\";\r\n        css.innerHTML = \".txt-rotate > .wrap { border-right: 0.08em solid #666 }\";\r\n        document.body.appendChild(css);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"typewriter\">\r\n                I do\r\n                <div\r\n                    class=\"txt-rotate\"\r\n                    data-period=\"0\"\r\n                    data-rotate='[\"React.js\", \"User Experience\", \"IOT\", \"Agile Development\", \"NPM\", \"Tech\", \"Simplicity\" ]'\r\n                >\r\n                </div>\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeHeader","import React from 'react';\nimport './app.scss'\nimport TopLinks from './shared/TopLinks'\nimport HomeHeader from './shared/HomeHeader'\n\nfunction App() {\n  return (\n    <div>\n      <TopLinks />\n      <HomeHeader />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}